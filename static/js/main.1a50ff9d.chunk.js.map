{"version":3,"sources":["svgs/close-black-18dp.svg","svgs/location_on-black-18dp.svg","svgs/navigate_before-black-18dp.svg","svgs/navigate_next-black-18dp.svg","utils/data.js","api/doctors.js","config.js","store.js","components/Picker.js","components/SearchPanel.js","components/DoctorCard.js","components/DoctorList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","mapServiceType","serviceType","HER","PHY","ACU","BST","SPL","PHS","ROE","CHI","SPO","removeBlankItems","array","_filter","item","_isEmpty","fetchDoctorList","axios","get","ROOT_PATH","then","data","Promise","resolve","parse","from_line","err","output","result","_map","row","id","name","serviceTypes","split","region","location","address","tel","openDays","_join","prices","medicine","parseCsvData","DoctorListContext","createContext","StoreProvider","children","useState","regionOptions","setRegionOptions","locationFilters","setLocationFilters","fullList","setFullList","useEffect","doctors","groups","locations","_forEach","doctor","push","getRegions","contextValue","Provider","value","useLocationFilters","useContext","filter","newFilters","_includes","f","concat","PickerContainer","styled","div","PickerOption","Picker","items","values","onSelect","key","className","onClick","propTyeps","PropTypes","arrayOf","string","func","PanelContainer","PickersContainer","FilterList","Filter","FilterTag","SearchPanel","toggleFilter","regions","setRegion","Object","keys","val","locationFilter","src","CloseSvg","alt","Card","DoctorName","ServiceList","ContactInfos","ServiceTag","DoctorAddress","a","DoctorInfo","DoctorCard","href","encodeURI","target","LocationSvg","price","index","labelPrefix","length","openDay","replace","ListContainer","Pager","PagerButton","img","CardWrapper","DoctorList","page","setPage","pageSize","useMemo","pageItems","_slice","totalPages","Math","ceil","useDoctorList","filters","PrevSvg","max","NextSvg","min","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a50ff9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close-black-18dp.10ddc4e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/location_on-black-18dp.9f46df7f.svg\";","module.exports = __webpack_public_path__ + \"static/media/navigate_before-black-18dp.ceab4a59.svg\";","module.exports = __webpack_public_path__ + \"static/media/navigate_next-black-18dp.afc862ec.svg\";","import _map from 'lodash/map'\nimport _filter from 'lodash/filter'\nimport _forEach from 'lodash/forEach'\nimport _isEmpty from 'lodash/isEmpty'\nimport _join from 'lodash/join'\nimport parse from 'csv-parse'\n\n/**\n * Removes special characters at the end of the string.\n * @param {string} text\n */\nexport function trimSpecialChars(text) {\n  return text.replace(/[,:;]*$/, '')\n}\n\n/**\n * Gets the link to google map for the location.\n * @param {string} location\n */\nexport function getLocationLink(location) {\n  return `https://maps.google.com/?q=${encodeURI(location)}`\n}\n\n/**\n * Returns the label for service type code.\n * @param {string} serviceType\n */\nexport function mapServiceType(serviceType) {\n  return {\n    HER: '中醫',\n    PHY: '普通科門診',\n    ACU: '針灸',\n    BST: '跌打',\n    SPL: '腸胃肝臟科專科',\n    PHS: '物理治療',\n    ROE: '牙科',\n    CHI: '脊醫',\n    SPO: '運動治療',\n  }[serviceType]\n}\n\n/**\n * Removes empty items from the array.\n * @param {array} array\n */\nexport function removeBlankItems(array) {\n  return _filter(array, item => !_isEmpty(item))\n}\n\n/**\n * Gets all regions and locations from the doctor list and returns a map to the list of locations.\n * @param {array} doctors\n * @returns map of region -> array of locations\n */\nexport function getRegions(doctors) {\n  const groups = {}\n  const locations = {}\n  _forEach(doctors, doctor => {\n    if (!locations[doctor.location]) {\n      locations[doctor.location] = true\n\n      if (!groups[doctor.region]) {\n        groups[doctor.region] = []\n      }\n      groups[doctor.region].push(doctor.location)\n    }\n  })\n  return groups\n}\n\n/**\n * Parses and converts the data csv to an array of doctor objects.\n * @param {*} data\n */\nexport function parseCsvData(data) {\n  return new Promise(resolve => {\n    parse(data, {\n      from_line: 2\n    }, function (err, output) {\n      const result = _map(output, row => {\n        return {\n          id: row[3],\n          name: row[4],\n          serviceTypes: row[0].split('/'),\n          region: row[12],\n          location: row[11],\n          address: [\n            row[9],\n            row[10]\n          ],\n          tel: row[13],\n          openDays: removeBlankItems([\n            _join(removeBlankItems([row[23], row[24]]), ': '),\n            _join(removeBlankItems([row[25], row[26]]), ': '),\n            _join(removeBlankItems([row[27], row[28]]), ': '),\n            _join(removeBlankItems([row[29], row[30]]), ': '),\n          ]),\n          prices: removeBlankItems(row[31].split(',')),\n          medicine: removeBlankItems(row[33].split(','))\n        }\n      })\n      resolve(result)\n    })\n  })\n}\n","import axios from 'axios'\n\nimport { DOCTOR_LIST_CSV_PATH } from '../config'\nimport { parseCsvData } from '../utils/data'\n\nexport function fetchDoctorList() {\n  return axios.get(DOCTOR_LIST_CSV_PATH).then(({ data }) => parseCsvData(data))\n}\n","export const ROOT_PATH = '/bowtie-doctor-list-demo'\nexport const DOCTOR_LIST_CSV_PATH = ROOT_PATH + '/doctors.csv'\n","import React, { createContext, useContext, useEffect, useState, useMemo } from 'react'\nimport _filter from 'lodash/filter'\nimport _isEmpty from 'lodash/isEmpty'\nimport _includes from 'lodash/includes'\nimport _slice from 'lodash/slice'\n\nimport { fetchDoctorList } from './api/doctors'\nimport { getRegions } from './utils/data'\n\nconst DoctorListContext = createContext()\n\nexport function StoreProvider({ children }) {\n  const [regionOptions, setRegionOptions] = useState({})\n  const [locationFilters, setLocationFilters] = useState([])\n  const [fullList, setFullList] = useState([])\n\n  useEffect(() => {\n    // fetch remote doctor list on mounted\n    fetchDoctorList().then(doctors => {\n      setFullList(doctors)\n      setRegionOptions(getRegions(doctors))\n    })\n  }, [])\n\n  const contextValue = {\n    fullList,\n    regionOptions,\n    locationFilters,\n    setLocationFilters,\n  }\n\n  return (\n    <DoctorListContext.Provider value={contextValue}>\n      { children }\n    </DoctorListContext.Provider>\n  )\n}\n\n/**\n * Gets the filtered doctor list of the specified page.\n * @param {*} page the current page number, starting at 0\n * @param {*} pageSize the number of items in a page\n * @returns [items of the page, total number of page]\n */\nexport function useDoctorList(page = 0, pageSize = 10) {\n  const { locationFilters, fullList } = useContext(DoctorListContext)\n\n  const items = useMemo(() => {\n    if (_isEmpty(locationFilters)) {\n      return fullList // return full list if no filter is applied\n    }\n    return _filter(fullList, doctor => {\n      return _includes(locationFilters, doctor.location) // show a doctor if the location matches any of the filter\n    })\n  }, [locationFilters, fullList])\n\n  const pageItems = _slice(items, page * pageSize, (page + 1) * pageSize)\n  const totalPages = Math.ceil(items.length / pageSize)\n\n  return [pageItems, totalPages]\n}\n\n/**\n * Gets the applied filters and the function to manipulate the filter list.\n * @returns [selectedFilters, function to toggle a filter]\n */\nexport function useLocationFilters() {\n  const { locationFilters, setLocationFilters } = useContext(DoctorListContext)\n  const toggleFilter = (filter) => {\n    let newFilters\n    if (_includes(locationFilters, filter)) {\n      newFilters = _filter(locationFilters, f => f !== filter)\n    } else {\n      newFilters = locationFilters.concat(filter)\n    }\n    setLocationFilters(newFilters)\n  }\n  return [locationFilters, toggleFilter]\n}\n\n/**\n * @returns available options of locations\n */\nexport function useRegions() {\n  const { regionOptions } = useContext(DoctorListContext)\n  return regionOptions\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport _map from 'lodash/map'\nimport _includes from 'lodash/includes'\n\nconst PickerContainer = styled.div`\n  width: 175px;\n  height: 250px;\n  border: 1px solid #DDDDDD;\n  overflow: auto;\n`\n\nconst PickerOption = styled.div`\n  cursor: pointer;\n  padding: 5px;\n  &:not(:first-child) {\n    border-top: 1px solid #CCCCCC;\n  }\n  &:hover {\n    background: #EEEEEE;\n  }\n  &.active {\n    background: aliceblue;\n  }\n`\n\nfunction Picker({ items, values, onSelect }) {\n  return (\n    <PickerContainer>\n      {_map(items, item => (\n        <PickerOption\n          key={item}\n          className={_includes(values, item) ? 'active' : ''}\n          onClick={() => onSelect && onSelect(item)}\n        >\n          { item }\n        </PickerOption>\n      ))}\n    </PickerContainer>\n  )\n}\n\nPicker.propTyeps = {\n  items: PropTypes.arrayOf(PropTypes.string),\n  values: PropTypes.arrayOf(PropTypes.string),\n  onSelect: PropTypes.func\n}\n\nexport default Picker\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport _map from 'lodash/map'\n\nimport { useLocationFilters, useRegions } from '../store'\nimport Picker from './Picker'\nimport CloseSvg from '../svgs/close-black-18dp.svg'\n\nconst PanelContainer = styled.div`\n  margin: 10px 20px;\n`\n\nconst PickersContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst FilterList = styled.div`\n  margin: 10px -5px 0 -5px;\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst Filter = styled.div`\n  padding: 5px;\n`\n\nconst FilterTag = styled.div`\n  cursor: pointer;\n  background: khaki;\n  border-radius: 20px;\n  padding: 5px 10px 5px 15px;\n  display: flex;\n  align-items: center;\n`\n\nfunction SearchPanel () {\n  const [locationFilters, toggleFilter] = useLocationFilters()\n  const regions = useRegions()\n\n  const [region, setRegion] = useState(null) // current selection of region\n  const locations = regions && regions[region]\n\n  return (\n    <PanelContainer>\n      <PickersContainer>\n        <Picker\n          items={Object.keys(regions)}\n          onSelect={val => setRegion(val)}\n        />\n        <Picker\n          items={locations}\n          values={locationFilters}\n          onSelect={val => toggleFilter(val)}\n        />\n      </PickersContainer>\n      <FilterList>\n        {_map(locationFilters, locationFilter => (\n          <Filter key={locationFilter}>\n            <FilterTag onClick={() => toggleFilter(locationFilter)}>\n              <span>{ locationFilter }</span>\n              <img src={CloseSvg} alt='' />\n            </FilterTag>\n          </Filter>\n        ))}\n      </FilterList>\n    </PanelContainer>\n  )\n}\n\nexport default SearchPanel\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport _map from 'lodash/map'\nimport _join from 'lodash/join'\n\nimport { mapServiceType, trimSpecialChars, getLocationLink } from '../utils/data'\nimport LocationSvg from '../svgs/location_on-black-18dp.svg'\n\nconst Card = styled.div`\n  box-sizing: border-box;\n  border: 1px solid #BBBBBB;\n  padding: 10px;\n  box-shadow: 2px 4px 4px #DDDDDD;\n`\n\nconst DoctorName = styled.div`\n  font-weight: bold;\n  font-size: 18px;\n`\n\nconst ServiceList = styled.div`\n  margin-top: 10px;\n  display: flex;\n`\n\nconst ContactInfos = styled.div`\n  margin: 10px 0;\n`\n\nconst ServiceTag = styled.div`\n  border: 1px solid #CCCCCC;\n  padding: 5px 15px;\n  border-radius: 20px;\n  :not(:first-child) {\n    margin-left: 5px;\n  }\n`\n\nconst DoctorAddress = styled.a`\n  font-weight: bold;\n  text-decoration: none;\n  display: flex;\n  align-items: center;\n`\n\nconst DoctorInfo = styled.div`\n  line-height: 22px;\n`\n\nfunction DoctorCard({ doctor }) {\n  return (\n    <Card>\n      <DoctorName>{ doctor.name }</DoctorName>\n      <ServiceList>\n        {_map(doctor.serviceTypes, serviceType => (\n          <ServiceTag key={serviceType}>{ mapServiceType(serviceType) }</ServiceTag>\n        ))}\n      </ServiceList>\n      <ContactInfos>\n        <DoctorAddress href={getLocationLink(_join(doctor.address, ','))} target=\"_blank\">\n          <img src={LocationSvg} alt='' />\n          <span>{ _join(doctor.address, ', ') }</span>\n        </DoctorAddress>\n        <DoctorInfo>電話: { doctor.tel }</DoctorInfo>\n      </ContactInfos>\n      <DoctorInfo><b>會員專享:</b></DoctorInfo>\n      {_map(doctor.prices, (price, index) => {\n        let labelPrefix = ''\n        if (doctor.prices.length === doctor.serviceTypes.length && doctor.prices.length > 1) {\n          labelPrefix = mapServiceType(doctor.serviceTypes[index])\n        }\n        return (\n          <DoctorInfo key={index}>{ labelPrefix }診金: ${ price }</DoctorInfo>\n        )\n      })}\n      {_map(doctor.openDays, (openDay, index) => (\n        <DoctorInfo key={index}>{ trimSpecialChars(openDay) }</DoctorInfo>\n      ))}\n    </Card>\n  )\n}\n\nDoctorCard.propTypes = {\n  doctor: PropTypes.any\n}\n\nexport default DoctorCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport _map from 'lodash/map'\n\nimport SearchPanel from './SearchPanel'\nimport DoctorCard from './DoctorCard'\nimport PrevSvg from '../svgs/navigate_before-black-18dp.svg'\nimport NextSvg from '../svgs/navigate_next-black-18dp.svg'\nimport { useDoctorList, useLocationFilters } from '../store'\n\nconst ListContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst Pager = styled.div`\n  margin: 20px 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst PagerButton = styled.img`\n  margin: 0 20px;\n  cursor: pointer;\n`\n\nconst CardWrapper = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  padding: 15px;\n  @media screen and (min-width: 1024px) {\n    width: 50%;\n  }\n  @media screen and (min-width: 1440px) {\n    width: 33.3333%;\n  }\n`\n\nexport default function DoctorList() {\n  const [page, setPage] = useState(0)\n  const [doctors, totalPages] = useDoctorList(page, 12) // use 12 items per page for all layouts\n  const [filters] = useLocationFilters()\n\n  // reset to page 1 if filter is updated\n  useEffect(() => {\n    setPage(0)\n  }, [filters])\n\n  return (\n    <div>\n      <SearchPanel />\n      <ListContainer>\n        {_map(doctors, (doctor, index) => (\n          <CardWrapper key={index}>\n            <DoctorCard doctor={doctor} />\n          </CardWrapper>\n        ))}\n      </ListContainer>\n      <Pager>\n        <PagerButton\n          src={PrevSvg}\n          onClick={() => setPage(Math.max(0, page - 1))}\n        />\n        <span>Page { page + 1 } / { totalPages }</span>\n        <PagerButton\n          src={NextSvg}\n          onClick={() => setPage(Math.min(totalPages - 1, page + 1))}\n        />\n      </Pager>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport DoctorList from './components/DoctorList'\nimport { StoreProvider } from './store';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StoreProvider>\n        <DoctorList />\n      </StoreProvider>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}