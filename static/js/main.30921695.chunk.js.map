{"version":3,"sources":["utils/data.js","api/doctors.js","config.js","store.js","components/Picker.js","components/SearchPanel.js","components/DoctorCard.js","components/DoctorList.js","App.js","serviceWorker.js","index.js"],"names":["mapServiceType","serviceType","HER","PHY","ACU","BST","SPL","PHS","ROE","CHI","SPO","removeBlankItems","array","_filter","item","_isEmpty","fetchDoctorList","axios","get","ROOT_PATH","then","data","Promise","resolve","parse","from_line","err","output","result","_map","row","id","name","serviceTypes","split","region","location","address","tel","openDays","_join","prices","medicine","parseCsvData","DoctorListContext","createContext","StoreProvider","children","useState","loading","setLoading","regionOptions","setRegionOptions","locationFilters","setLocationFilters","fullList","setFullList","useEffect","doctors","groups","locations","_forEach","doctor","push","getRegions","contextValue","Provider","value","useLocationFilters","useContext","filter","newFilters","_includes","f","concat","PickerContainer","styled","div","PickerOption","Picker","className","items","values","onSelect","key","onClick","propTyeps","PropTypes","string","arrayOf","func","PanelContainer","Underlay","props","active","SearchWrapper","SearchContainer","expand","PickersContainer","RegionPicker","LocationPicker","FilterList","FilterHint","span","Filter","FilterTag","SearchPanel","toggleFilter","regions","setExpand","setRegion","onMouseEnter","onTouchStart","length","locationFilter","Object","keys","val","Card","CardHeader","DoctorName","CardButton","ServiceList","ContactInfos","ServiceTag","DoctorAddress","a","DoctorInfo","Icon","DoctorCard","useMemo","navigator","share","title","text","clipboard","writeText","href","encodeURI","target","price","index","labelPrefix","openDay","replace","ListContainer","Pager","PagerButton","disabled","CardWrapper","DoctorList","page","setPage","pageSize","pageItems","_slice","totalPages","Math","ceil","useDoctorList","filters","max","min","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30921695.chunk.js","sourcesContent":["import _map from 'lodash/map'\r\nimport _filter from 'lodash/filter'\r\nimport _forEach from 'lodash/forEach'\r\nimport _isEmpty from 'lodash/isEmpty'\r\nimport _join from 'lodash/join'\r\nimport parse from 'csv-parse'\r\n\r\n/**\r\n * Removes special characters at the end of the string.\r\n * @param {string} text\r\n */\r\nexport function trimSpecialChars(text) {\r\n  return text.replace(/[,:;]*$/, '')\r\n}\r\n\r\n/**\r\n * Gets the link to google map for the location.\r\n * @param {string} location\r\n */\r\nexport function getLocationLink(location) {\r\n  return `https://maps.google.com/?q=${encodeURI(location)}`\r\n}\r\n\r\n/**\r\n * Returns the label for service type code.\r\n * @param {string} serviceType\r\n */\r\nexport function mapServiceType(serviceType) {\r\n  return {\r\n    HER: '中醫',\r\n    PHY: '普通科門診',\r\n    ACU: '針灸',\r\n    BST: '跌打',\r\n    SPL: '腸胃肝臟科專科',\r\n    PHS: '物理治療',\r\n    ROE: '牙科',\r\n    CHI: '脊醫',\r\n    SPO: '運動治療',\r\n  }[serviceType]\r\n}\r\n\r\n/**\r\n * Removes empty items from the array.\r\n * @param {array} array\r\n */\r\nexport function removeBlankItems(array) {\r\n  return _filter(array, item => !_isEmpty(item))\r\n}\r\n\r\n/**\r\n * Gets all regions and locations from the doctor list and returns a map to the list of locations.\r\n * @param {array} doctors\r\n * @returns map of region -> array of locations\r\n */\r\nexport function getRegions(doctors) {\r\n  const groups = {}\r\n  const locations = {}\r\n  _forEach(doctors, doctor => {\r\n    if (!locations[doctor.location]) {\r\n      locations[doctor.location] = true\r\n\r\n      if (!groups[doctor.region]) {\r\n        groups[doctor.region] = []\r\n      }\r\n      groups[doctor.region].push(doctor.location)\r\n    }\r\n  })\r\n  return groups\r\n}\r\n\r\n/**\r\n * Parses and converts the data csv to an array of doctor objects.\r\n * @param {*} data\r\n */\r\nexport function parseCsvData(data) {\r\n  return new Promise(resolve => {\r\n    parse(data, {\r\n      from_line: 2\r\n    }, function (err, output) {\r\n      const result = _map(output, row => {\r\n        return {\r\n          id: row[3],\r\n          name: row[4],\r\n          serviceTypes: row[0].split('/'),\r\n          region: row[12],\r\n          location: row[11],\r\n          address: [\r\n            row[9],\r\n            row[10]\r\n          ],\r\n          tel: row[13],\r\n          openDays: removeBlankItems([\r\n            _join(removeBlankItems([row[23], row[24]]), ': '),\r\n            _join(removeBlankItems([row[25], row[26]]), ': '),\r\n            _join(removeBlankItems([row[27], row[28]]), ': '),\r\n            _join(removeBlankItems([row[29], row[30]]), ': '),\r\n          ]),\r\n          prices: removeBlankItems(row[31].split(',')),\r\n          medicine: removeBlankItems(row[33].split(','))\r\n        }\r\n      })\r\n      resolve(result)\r\n    })\r\n  })\r\n}\r\n","import axios from 'axios'\r\n\r\nimport { DOCTOR_LIST_CSV_PATH } from '../config'\r\nimport { parseCsvData } from '../utils/data'\r\n\r\nexport function fetchDoctorList() {\r\n  return axios.get(DOCTOR_LIST_CSV_PATH).then(({ data }) => parseCsvData(data))\r\n}\r\n","export const ROOT_PATH = '/bowtie-doctor-list-demo'\r\nexport const DOCTOR_LIST_CSV_PATH = ROOT_PATH + '/doctors.csv'\r\n","import React, { createContext, useContext, useEffect, useState, useMemo } from 'react'\r\nimport _filter from 'lodash/filter'\r\nimport _isEmpty from 'lodash/isEmpty'\r\nimport _includes from 'lodash/includes'\r\nimport _slice from 'lodash/slice'\r\n\r\nimport { fetchDoctorList } from './api/doctors'\r\nimport { getRegions } from './utils/data'\r\n\r\nconst DoctorListContext = createContext()\r\n\r\nexport function StoreProvider({ children }) {\r\n  const [loading, setLoading] = useState(true)\r\n  const [regionOptions, setRegionOptions] = useState({})\r\n  const [locationFilters, setLocationFilters] = useState([])\r\n  const [fullList, setFullList] = useState([])\r\n\r\n  useEffect(() => {\r\n    // fetch remote doctor list on mounted\r\n    fetchDoctorList().then(doctors => {\r\n      setFullList(doctors)\r\n      setRegionOptions(getRegions(doctors))\r\n      setLoading(false)\r\n    })\r\n  }, [])\r\n\r\n  const contextValue = {\r\n    fullList,\r\n    regionOptions,\r\n    locationFilters,\r\n    setLocationFilters,\r\n    loading\r\n  }\r\n\r\n  return (\r\n    <DoctorListContext.Provider value={contextValue}>\r\n      { children }\r\n    </DoctorListContext.Provider>\r\n  )\r\n}\r\n\r\n/**\r\n * Gets the filtered doctor list of the specified page.\r\n * @param {*} page the current page number, starting at 0\r\n * @param {*} pageSize the number of items in a page\r\n * @returns [items of the page, total number of page]\r\n */\r\nexport function useDoctorList(page = 0, pageSize = 10) {\r\n  const { loading, locationFilters, fullList } = useContext(DoctorListContext)\r\n\r\n  const items = useMemo(() => {\r\n    if (_isEmpty(locationFilters)) {\r\n      return fullList // return full list if no filter is applied\r\n    }\r\n    return _filter(fullList, doctor => {\r\n      return _includes(locationFilters, doctor.location) // show a doctor if the location matches any of the filter\r\n    })\r\n  }, [locationFilters, fullList])\r\n\r\n  const pageItems = _slice(items, page * pageSize, (page + 1) * pageSize)\r\n  const totalPages = Math.ceil(items.length / pageSize)\r\n\r\n  return [loading, pageItems, totalPages]\r\n}\r\n\r\n/**\r\n * Gets the applied filters and the function to manipulate the filter list.\r\n * @returns [selectedFilters, function to toggle a filter]\r\n */\r\nexport function useLocationFilters() {\r\n  const { locationFilters, setLocationFilters } = useContext(DoctorListContext)\r\n  const toggleFilter = (filter) => {\r\n    let newFilters\r\n    if (_includes(locationFilters, filter)) {\r\n      newFilters = _filter(locationFilters, f => f !== filter)\r\n    } else {\r\n      newFilters = locationFilters.concat(filter)\r\n    }\r\n    setLocationFilters(newFilters)\r\n  }\r\n  return [locationFilters, toggleFilter]\r\n}\r\n\r\n/**\r\n * @returns available options of locations\r\n */\r\nexport function useRegions() {\r\n  const { regionOptions } = useContext(DoctorListContext)\r\n  return regionOptions\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport _map from 'lodash/map'\r\nimport _includes from 'lodash/includes'\r\n\r\nconst PickerContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-sizing: border-box;\r\n  overflow: auto;\r\n`\r\n\r\nconst PickerOption = styled.div`\r\n  cursor: pointer;\r\n  margin: 2.5px;\r\n  padding: 5px;\r\n  transition background 0.3s;\r\n  &:hover {\r\n    background: #EEEEEE;\r\n  }\r\n  &.active {\r\n    background: aliceblue;\r\n  }\r\n`\r\n\r\nfunction Picker({ className, items, values, onSelect }) {\r\n  return (\r\n    <PickerContainer className={className}>\r\n      {_map(items, item => (\r\n        <PickerOption\r\n          key={item}\r\n          className={_includes(values, item) ? 'active' : ''}\r\n          onClick={() => onSelect && onSelect(item)}\r\n        >\r\n          { item }\r\n        </PickerOption>\r\n      ))}\r\n    </PickerContainer>\r\n  )\r\n}\r\n\r\nPicker.propTyeps = {\r\n  className: PropTypes.string,\r\n  items: PropTypes.arrayOf(PropTypes.string),\r\n  values: PropTypes.arrayOf(PropTypes.string),\r\n  onSelect: PropTypes.func\r\n}\r\n\r\nexport default Picker\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport _map from 'lodash/map'\r\n\r\nimport { useLocationFilters, useRegions } from '../store'\r\nimport Picker from './Picker'\r\n\r\nconst PanelContainer = styled.div`\r\n  position: sticky;\r\n  top: 0;\r\n  border-bottom: 1px solid #DDDDDD;\r\n  background: white;\r\n  z-index: 1;\r\n`\r\n\r\nconst Underlay = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1;\r\n\r\n  ${props => props.active ? '' : 'display: none;'}\r\n`\r\n\r\nconst SearchWrapper = styled.div`\r\n  position: relative;\r\n  z-index: 2;\r\n`\r\n\r\nconst SearchContainer = styled.div`\r\n  transition: height 0.3s;\r\n  overflow: hidden;\r\n  height: ${props => props.expand ? '135px' : '0'};\r\n`\r\n\r\nconst PickersContainer = styled.div`\r\n  height: 125px;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nconst RegionPicker = styled(Picker)`\r\n  margin-right: 5px;\r\n  @media screen and (min-width: 1024px) {\r\n    margin-right: 15px\r\n  }\r\n`\r\n\r\nconst LocationPicker = styled(Picker)`\r\n  border-left: 1px solid #DDDDDD;\r\n  padding-left: 5px;\r\n  width: 75%;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n  @media screen and (min-width: 1024px) {\r\n    width: 50%;\r\n    padding-left: 15px;\r\n  }\r\n`\r\n\r\nconst FilterList = styled.div`\r\n  margin: 0 15px;\r\n  min-height: 42px;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nconst FilterHint = styled.span`\r\n  margin-left: 5px;\r\n  color: #888888;\r\n`\r\n\r\nconst Filter = styled.div`\r\n  padding: 5px;\r\n`\r\n\r\nconst FilterTag = styled.div`\r\n  cursor: pointer;\r\n  background: khaki;\r\n  border-radius: 20px;\r\n  padding: 5px 10px 5px 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  > span.material-icons {\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\nfunction SearchPanel () {\r\n  const [locationFilters, toggleFilter] = useLocationFilters()\r\n  const regions = useRegions()\r\n  const [expand, setExpand] = useState(false)\r\n\r\n  const [region, setRegion] = useState(null) // current selection of region\r\n  const locations = regions && regions[region]\r\n\r\n  return (\r\n    <PanelContainer>\r\n      <Underlay active={expand} onMouseEnter={() => setExpand(false)} onTouchStart={() => setExpand(false)} />\r\n      <SearchWrapper onMouseEnter={() => setExpand(true)} onTouchStart={() => setExpand(true)}>\r\n        <FilterList>\r\n          <span className=\"material-icons\">search</span>\r\n          {locationFilters.length === 0 ? (\r\n            <FilterHint>按地區搜索</FilterHint>\r\n          ) : (\r\n            _map(locationFilters, locationFilter => (\r\n              <Filter key={locationFilter}>\r\n                <FilterTag onClick={() => toggleFilter(locationFilter)}>\r\n                  <span>{ locationFilter }</span>\r\n                  <span className=\"material-icons\">close</span>\r\n                </FilterTag>\r\n              </Filter>\r\n            ))\r\n          )}\r\n        </FilterList>\r\n        <SearchContainer expand={expand}>\r\n          <PickersContainer>\r\n            <RegionPicker\r\n              items={Object.keys(regions)}\r\n              onSelect={val => setRegion(val)}\r\n            />\r\n            <LocationPicker\r\n              items={locations}\r\n              values={locationFilters}\r\n              onSelect={val => toggleFilter(val)}\r\n            />\r\n          </PickersContainer>\r\n        </SearchContainer>\r\n      </SearchWrapper>\r\n    </PanelContainer>\r\n  )\r\n}\r\n\r\nexport default SearchPanel\r\n","import React, { useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport _map from 'lodash/map'\r\nimport _join from 'lodash/join'\r\n\r\nimport { mapServiceType, trimSpecialChars, getLocationLink } from '../utils/data'\r\n\r\nconst Card = styled.div`\r\n  box-sizing: border-box;\r\n  border: 1px solid #BBBBBB;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  box-shadow: 2px 4px 4px #DDDDDD;\r\n`\r\n\r\nconst CardHeader = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst DoctorName = styled.div`\r\n  flex: 1;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n`\r\n\r\nconst CardButton = styled.span`\r\n  margin-left: 10px;\r\n  cursor: pointer;\r\n  font-size: 22px;\r\n`\r\n\r\nconst ServiceList = styled.div`\r\n  margin: 0 -2.5px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nconst ContactInfos = styled.div`\r\n  margin: 10px 0;\r\n`\r\n\r\nconst ServiceTag = styled.div`\r\n  margin: 10px 2.5px 0 2.5px;\r\n  border: 1px solid #CCCCCC;\r\n  padding: 5px 15px;\r\n  border-radius: 20px;\r\n  :not(:first-child) {\r\n    margin-left: 5px;\r\n  }\r\n`\r\n\r\nconst DoctorAddress = styled.a`\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst DoctorInfo = styled.div`\r\n  line-height: 22px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Icon = styled.span`\r\n  color: black;\r\n  font-size: 18px;\r\n`\r\n\r\nfunction DoctorCard({ doctor }) {\r\n  const address = useMemo(() => _join(doctor.address, ', '), [doctor.address])\r\n\r\n  const onShare = () => {\r\n    navigator.share({\r\n      title: doctor.name,\r\n      text: `${doctor.name}\\n地址:${address}\\n電話:${doctor.tel}`\r\n    })\r\n  }\r\n\r\n  const onCopy = () => {\r\n    navigator.clipboard.writeText(`${doctor.name}\\n地址:${address}\\n電話:${doctor.tel}`)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <DoctorName>{ doctor.name }</DoctorName>\r\n        {navigator.share ? (\r\n          <CardButton className=\"material-icons\" onClick={onShare}>share</CardButton>\r\n        ) : null}\r\n        {navigator.clipboard ? (\r\n          <CardButton className=\"material-icons\" onClick={onCopy}>file_copy</CardButton>\r\n        ) : null}\r\n      </CardHeader>\r\n      <ServiceList>\r\n        {_map(doctor.serviceTypes, serviceType => (\r\n          <ServiceTag key={serviceType}>{ mapServiceType(serviceType) }</ServiceTag>\r\n        ))}\r\n      </ServiceList>\r\n      <ContactInfos>\r\n        <DoctorAddress href={getLocationLink(_join(doctor.address, ','))} target=\"_blank\">\r\n          <Icon className=\"material-icons\">location_on</Icon>\r\n          <span>{ address }</span>\r\n        </DoctorAddress>\r\n        <DoctorInfo>\r\n          <Icon className=\"material-icons\">local_phone</Icon>{ doctor.tel }\r\n        </DoctorInfo>\r\n      </ContactInfos>\r\n      <DoctorInfo><b>會員專享:</b></DoctorInfo>\r\n      {_map(doctor.prices, (price, index) => {\r\n        let labelPrefix = ''\r\n        if (doctor.prices.length === doctor.serviceTypes.length && doctor.prices.length > 1) {\r\n          labelPrefix = mapServiceType(doctor.serviceTypes[index])\r\n        }\r\n        return (\r\n          <DoctorInfo key={index}>\r\n            { labelPrefix }診金: ${ price }\r\n          </DoctorInfo>\r\n        )\r\n      })}\r\n      {_map(doctor.openDays, (openDay, index) => (\r\n        <DoctorInfo key={index}>{ trimSpecialChars(openDay) }</DoctorInfo>\r\n      ))}\r\n    </Card>\r\n  )\r\n}\r\n\r\nDoctorCard.propTypes = {\r\n  doctor: PropTypes.any\r\n}\r\n\r\nexport default DoctorCard\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport _map from 'lodash/map'\r\n\r\nimport SearchPanel from './SearchPanel'\r\nimport DoctorCard from './DoctorCard'\r\nimport { useDoctorList, useLocationFilters } from '../store'\r\n\r\nconst ListContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nconst Pager = styled.div`\r\n  position: sticky;\r\n  bottom: 0;\r\n  background: white;\r\n  border-top: 1px solid #DDDDDD;\r\n  padding: 10px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nconst PagerButton = styled.span`\r\n  margin: 0 20px;\r\n  cursor: pointer;\r\n  ${props => props.disabled ? 'color: #BBBBBB;' : ''}\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  padding: 15px;\r\n  > * {\r\n    height: 100%;\r\n  }\r\n  @media screen and (min-width: 1024px) {\r\n    width: 50%;\r\n    padding: 20px;\r\n  }\r\n  @media screen and (min-width: 1440px) {\r\n    width: 33.3333%;\r\n  }\r\n`\r\n\r\nexport default function DoctorList() {\r\n  const [page, setPage] = useState(0)\r\n  const [loading, doctors, totalPages] = useDoctorList(page, 12) // use 12 items per page for all layouts\r\n  const [filters] = useLocationFilters()\r\n\r\n  // reset to page 1 if filter is updated\r\n  useEffect(() => {\r\n    setPage(0)\r\n  }, [filters])\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <SearchPanel />\r\n      <ListContainer>\r\n        {_map(doctors, (doctor, index) => (\r\n          <CardWrapper key={index}>\r\n            <DoctorCard doctor={doctor} />\r\n          </CardWrapper>\r\n        ))}\r\n      </ListContainer>\r\n      <Pager>\r\n        <PagerButton\r\n          className=\"material-icons\"\r\n          disabled={page === 0}\r\n          onClick={() => setPage(Math.max(0, page - 1))}\r\n        >\r\n          navigate_before\r\n        </PagerButton>\r\n        <span>第 { page + 1 } / { totalPages } 頁</span>\r\n        <PagerButton\r\n          className=\"material-icons\"\r\n          disabled={page >= totalPages - 1}\r\n          onClick={() => setPage(Math.min(totalPages - 1, page + 1))}\r\n        >\r\n          navigate_next\r\n        </PagerButton>\r\n      </Pager>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\n\nimport DoctorList from './components/DoctorList'\nimport { StoreProvider } from './store';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StoreProvider>\n        <DoctorList />\n      </StoreProvider>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}